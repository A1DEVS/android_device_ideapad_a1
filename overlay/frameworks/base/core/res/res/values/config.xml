<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (C) 2009 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!-- These resources are around just to allow their values to be customized
    for different hardware and product builds. -->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- Flag indicating whether the surface flinger is inefficient
        at performing a blur. Used by parts of the UI to turn off
        the blur effect where it isn't worth the performance hit. -->
    <bool name="config_sf_slowBlur">true</bool>

    <!-- Flag indicating whether we should enable the automatic brightness in Settings.
        config_hardware_automatic_brightness_available is not set, so we will use software implementation -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
        The N entries of this array define N + 1 zones as follows:

        Zone 0: 0 <= LUX < array[0]
        Zone 1: array[0] <= LUX < array[1]
        ...
        Zone N: array[N - 1] <= LUX < array[N]
        Zone N + 1: array[N] <= LUX < infinity

        Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>2</item>
        <item>4</item>
        <item>6</item>
        <item>10</item>
        <item>15</item>
        <item>20</item>
        <item>50</item>
        <item>70</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
            in the config_autoBrightnessLevels array. This array should have size one greater
            than the size of the config_autoBrightnessLevels array.
            -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>80</item>
        <item>90</item>
        <item>110</item>
        <item>130</item>
        <item>150</item>
        <item>170</item>
        <item>190</item>
        <item>210</item>
        <item>230</item>
        <item>255</item>
    </integer-array>

    <!-- Array of output values for button backlight corresponding to the LUX values
        in the config_autoBrightnessLevels array. This array should have size one greater
        than the size of the config_autoBrightnessLevels array.
        -->
     <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
    </integer-array>

    <!-- Array of output values for keyboard backlight corresponding to the LUX values
        in the config_autoBrightnessLevels array. This array should have size one greater
        than the size of the config_autoBrightnessLevels array.
        Passion has no keyboard so all values are zero.
        -->
    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <!-- This string array should be overridden by the device to present a list of network
        attributes. This is used by the connectivity manager to decide which networks can coexist
        based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager connection type],
        [associated radio-type],[priority] -->
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1"</item>
        <item>"mobile,0,0,0"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
        USB interfaces. If the device doesn't want to support tething over USB this should
        be empty. An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>usb0</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
        Wifi interfaces. If the device doesn't want to support tethering over Wifi this
        should be empty. An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>wl0.1</item>
    </string-array>

    <!-- Regex array of allowable upstream ifaces for tethering - for example if you want
        tethering on a new interface called "foo2" add <item>"foo\\d"</item> to the array -->
    <!-- Interfaces will be prioritized according to the order listed -->
    <string-array translatable="false" name="config_tether_upstream_regexs">
         <item>"eth\\d"</item>
    </string-array>

    <!-- Configures whether the primary external storage device is
        removable. For example, if external storage is on an SD card,
        it is removable; if it is built in to the device, it is not removable.
        The default product has external storage on an SD card, which is
        removable. -->
    <bool name="config_externalStorageRemovable">true</bool>

    <!-- Default color for notification LED. -->
    <color name="config_defaultNotificationColor">#ffffffff</color>

    <!-- Component name of the service providing network location support. -->
    <string name="config_networkLocationProvider">com.google.android.location.NetworkLocationProvider</string>

    <!-- Component name of the service providing geocoder API support. -->
    <string name="config_geocodeProvider">com.google.android.location.GeocodeProvider</string>

    <!-- The default iface on which to monitor data use -->
    <string name="config_datause_iface">eth0</string>

    <!-- Enable the screen-off animation -->
    <bool name="config_enableScreenOffAnimation">true</bool>

    <bool name="config_animateScreenLights">false</bool>

    <!-- The duration (in milliseconds) that the radio will scan for a signal
        when there's no network connection. If the scan doesn't timeout, use zero -->
    <integer name="config_radioScanningTimeout">1</integer>

    <!-- toggles weather device is tablet or phone. right now,
        tablets are know to have soft buttons, but phones have harware
        buttons. this might change in the future - especially when the
        honeycomb modifications become available for phones -->
    <bool name="cm_default_is_tablet">true</bool>

    <!-- toggles weather device uses soft buttons or got hardware
        buttons. as the time of writing for android 2.3.3. all soft button
        enabled devices are tablets, all disabled are phones. -->
    <bool name="cm_default_has_soft_buttons">true</bool>

    <!-- hide the onscreen buttons by default -->
    <bool name="cm_default_show_soft_home">false</bool>
    <bool name="cm_default_show_soft_menu">false</bool>
    <bool name="cm_default_show_soft_back">false</bool>
    <bool name="cm_default_show_soft_search">false</bool>
    <bool name="cm_default_show_soft_quick_na">false</bool>

</resources>
